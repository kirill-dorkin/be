import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

// –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const PerformanceMetricSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: z.number(),
  rating: z.enum(['good', 'needs-improvement', 'poor']),
  delta: z.number(),
  timestamp: z.number(),
  url: z.string().url(),
  userAgent: z.string(),
  connectionType: z.string().optional(),
});

const PerformanceDataSchema = z.object({
  metrics: z.array(PerformanceMetricSchema),
  sessionId: z.string().optional(),
  userId: z.string().optional(),
});

// POST - –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = PerformanceDataSchema.parse(body);

    // –í production –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ Google Analytics, DataDog, –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    if (process.env.NODE_ENV === 'production') {
      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–Ω–µ—à–Ω—é—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await sendToAnalytics(validatedData);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ development
    if (process.env.NODE_ENV === 'development') {
      console.log('üìä Performance Metrics:', {
        timestamp: new Date().toISOString(),
        metrics: validatedData.metrics.map(m => ({
          name: m.name,
          value: m.value,
          rating: m.rating,
          url: m.url
        }))
      });
    }

    return NextResponse.json({ 
      success: true, 
      message: 'Metrics received',
      count: validatedData.metrics.length 
    });

  } catch (error) {
    console.error('Error processing performance metrics:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Invalid data format',
          details: error.errors 
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error' 
      },
      { status: 500 }
    );
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const timeframe = searchParams.get('timeframe') || '24h';
    const metricFilter = searchParams.get('metric');

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockData = {
      timeframe,
      metricFilter,
      summary: {
        totalSessions: 1250,
        avgLCP: 2.1,
        avgINP: 180,
        avgCLS: 0.08,
        avgTTFB: 650,
        goodRating: 0.85,
        needsImprovementRating: 0.12,
        poorRating: 0.03
      },
      trends: [
        { timestamp: Date.now() - 86400000, lcp: 2.3, inp: 190, cls: 0.09 },
        { timestamp: Date.now() - 43200000, lcp: 2.1, inp: 180, cls: 0.08 },
        { timestamp: Date.now(), lcp: 2.0, inp: 170, cls: 0.07 }
      ]
    };

    return NextResponse.json(mockData);

  } catch (error) {
    console.error('Error fetching performance data:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to fetch performance data' 
      },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫ –≤ –≤–Ω–µ—à–Ω—é—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
async function sendToAnalytics(data: z.infer<typeof PerformanceDataSchema>) {
  // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Analytics 4
  if (process.env.GA_MEASUREMENT_ID) {
    try {
      const response = await fetch(`https://www.google-analytics.com/mp/collect?measurement_id=${process.env.GA_MEASUREMENT_ID}&api_secret=${process.env.GA_API_SECRET}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          client_id: data.sessionId || 'anonymous',
          events: data.metrics.map(metric => ({
            name: 'web_vitals',
            params: {
              metric_name: metric.name,
              metric_value: metric.value,
              metric_rating: metric.rating,
              page_location: metric.url,
            }
          }))
        })
      });

      if (!response.ok) {
        console.error('Failed to send to GA:', response.statusText);
      }
    } catch (error) {
      console.error('Error sending to analytics:', error);
    }
  }

  // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ DataDog (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  if (process.env.DATADOG_API_KEY) {
    try {
      await fetch('https://api.datadoghq.com/api/v1/series', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'DD-API-KEY': process.env.DATADOG_API_KEY,
        },
        body: JSON.stringify({
          series: data.metrics.map(metric => ({
            metric: `web_vitals.${metric.name}`,
            points: [[Math.floor(metric.timestamp / 1000), metric.value]],
            tags: [
              `rating:${metric.rating}`,
              `url:${new URL(metric.url).pathname}`,
            ]
          }))
        })
      });
    } catch (error) {
      console.error('Error sending to DataDog:', error);
    }
  }
}
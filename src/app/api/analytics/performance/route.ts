import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è performance –º–µ—Ç—Ä–∏–∫
const PerformanceMetricSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: z.number(),
  rating: z.enum(['good', 'needs-improvement', 'poor']),
  delta: z.number(),
  timestamp: z.number(),
  url: z.string().url(),
  userAgent: z.string(),
  connectionType: z.string().optional(),
  sessionId: z.string().optional(),
  userId: z.string().optional(),
  page: z.string().optional(),
  component: z.string().optional(),
  feature: z.string().optional(),
});

const PerformanceMetricsArraySchema = z.array(PerformanceMetricSchema);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
interface AnalyticsData {
  metrics: z.infer<typeof PerformanceMetricSchema>[];
  timestamp: number;
  source: 'web-vitals' | 'custom';
  environment: 'development' | 'production' | 'staging';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getEnvironment(): 'development' | 'production' | 'staging' {
  const env = process.env.NODE_ENV;
  if (env === 'production') return 'production';
  if (env === 'development') return 'development';
  return 'staging';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É)
async function logMetricsToAnalytics(data: AnalyticsData): Promise<void> {
  const environment = getEnvironment();
  
  // –í development —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
  if (environment === 'development') {
    console.log('üìä Performance Analytics:', {
      metricsCount: data.metrics.length,
      timestamp: new Date(data.timestamp).toISOString(),
      source: data.source,
      environment: data.environment,
      metrics: data.metrics.map(m => ({
        name: m.name,
        value: m.value,
        rating: m.rating,
        url: m.url,
      })),
    });
    return;
  }

  // –í production –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
  try {
    // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–Ω–µ—à–Ω—é—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    if (process.env.ANALYTICS_WEBHOOK_URL) {
      await fetch(process.env.ANALYTICS_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.ANALYTICS_API_KEY}`,
        },
        body: JSON.stringify(data),
      });
    }
  } catch (error) {
    console.error('Failed to send metrics to external analytics:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
function aggregateMetrics(metrics: z.infer<typeof PerformanceMetricSchema>[]) {
  const aggregated = {
    totalMetrics: metrics.length,
    webVitals: metrics.filter(m => ['LCP', 'INP', 'CLS', 'FCP', 'TTFB'].includes(m.name)),
    customMetrics: metrics.filter(m => !['LCP', 'INP', 'CLS', 'FCP', 'TTFB'].includes(m.name)),
    ratingDistribution: {
      good: metrics.filter(m => m.rating === 'good').length,
      needsImprovement: metrics.filter(m => m.rating === 'needs-improvement').length,
      poor: metrics.filter(m => m.rating === 'poor').length,
    },
    averageValues: {} as Record<string, number>,
  };

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Ç—Ä–∏–∫–∏
  const metricGroups = metrics.reduce((acc, metric) => {
    if (!acc[metric.name]) {
      acc[metric.name] = [];
    }
    acc[metric.name].push(metric.value);
    return acc;
  }, {} as Record<string, number[]>);

  Object.entries(metricGroups).forEach(([name, values]) => {
    aggregated.averageValues[name] = values.reduce((sum, val) => sum + val, 0) / values.length;
  });

  return aggregated;
}

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
    const contentType = request.headers.get('content-type');
    if (!contentType?.includes('application/json')) {
      return NextResponse.json(
        { 
          error: 'Invalid content type',
          message: 'Expected application/json',
        },
        { status: 400 }
      );
    }

    // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const body = await request.json();
    
    if (!Array.isArray(body)) {
      return NextResponse.json(
        { 
          error: 'Invalid data format',
          message: 'Expected array of metrics',
        },
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const validationResult = PerformanceMetricsArraySchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json(
        { 
          error: 'Validation failed',
          message: 'Invalid metric data',
          details: validationResult.error.issues,
        },
        { status: 400 }
      );
    }

    const metrics = validationResult.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (metrics.length === 0) {
      return NextResponse.json(
        { 
          error: 'No metrics provided',
          message: 'At least one metric is required',
        },
        { status: 400 }
      );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –º–µ—Ç—Ä–∏–∫
    const hasWebVitals = metrics.some(m => ['LCP', 'INP', 'CLS', 'FCP', 'TTFB'].includes(m.name));
    const source = hasWebVitals ? 'web-vitals' : 'custom';

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const analyticsData: AnalyticsData = {
      metrics,
      timestamp: Date.now(),
      source,
      environment: getEnvironment(),
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    await logMetricsToAnalytics(analyticsData);

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const aggregated = aggregateMetrics(metrics);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({
      success: true,
      message: 'Metrics processed successfully',
      data: {
        processed: metrics.length,
        timestamp: analyticsData.timestamp,
        source: analyticsData.source,
        environment: analyticsData.environment,
        aggregated,
      },
    });

  } catch (error) {
    console.error('Error processing performance metrics:', error);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    return NextResponse.json(
      { 
        error: 'Internal server error',
        message: 'Failed to process metrics',
        timestamp: Date.now(),
      },
      { status: 500 }
    );
  }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
export async function GET() {
  return NextResponse.json({
    status: 'ok',
    message: 'Performance analytics endpoint is running',
    timestamp: Date.now(),
    environment: getEnvironment(),
    endpoints: {
      POST: '/api/analytics/performance - Submit performance metrics',
    },
  });
}